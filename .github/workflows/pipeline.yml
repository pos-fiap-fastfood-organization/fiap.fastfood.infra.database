name: Terraform Apply - MongoDB Atlas

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_atlas_public_key: ${{ secrets.MONGO_ATLAS_PUBLIC_KEY }}
      TF_VAR_atlas_private_key: ${{ secrets.MONGO_ATLAS_PRIVATE_KEY }}
      TF_VAR_atlas_org_id: ${{ secrets.ORGANIZATION_MONGO_ATLAS_ID }}
      TF_VAR_fastfood_user_password: ${{ secrets.MONGO_DATABASE_ATLAS_FASTFOOD_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TERRAFORM }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TERRAFORM }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform output

      - name: Export Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tf-outputs
        run: |
          echo "MONGODB_URI=$(terraform output -raw mongodb_connection_string)" >> $GITHUB_ENV
          echo "MONGODB_USER=$(terraform output -raw mongodb_user)" >> $GITHUB_ENV
          echo "MONGODB_DATABASE=$(terraform output -raw mongodb_database)" >> $GITHUB_ENV

      - name: Install MongoDB Shell (mongosh)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Check if seed already exists
        id: check-seed
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          COUNT=$(mongosh "$MONGODB_URI" \
            --username "$MONGODB_USER" \
            --password "${TF_VAR_fastfood_user_password}" \
            --authenticationDatabase "admin" \
            --quiet \
            --eval "db.getSiblingDB('${MONGODB_DATABASE}').menu.countDocuments()")

          COUNT="$(echo \"$COUNT\" | tr -d '\r' | xargs || echo 0)"

          echo "count=$COUNT" >> $GITHUB_OUTPUT

          if [ -n "$COUNT" ] && [ "$COUNT" -gt 0 ]; then
            echo "seed_exists=true" >> $GITHUB_OUTPUT
          else
            echo "seed_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create seed file
        if: steps.check-seed.outputs.seed_exists == 'false'
        run: |
          # Monta seed.js: wrapper + conteÃºdo do secret
          echo "db = connect('$MONGODB_URI');" > seed.js
          echo "db.getSiblingDB('$MONGODB_DATABASE').menu.insertMany(" >> seed.js
          printf '%s\n' "${{ secrets.MENU_SEED_JSON }}" >> seed.js
          echo ");" >> seed.js

      - name: Seed MongoDB
        if: steps.check-seed.outputs.seed_exists == 'false'
        run: |
          mongosh "$MONGODB_URI" \
            --username "$MONGODB_USER" \
            --password "${TF_VAR_fastfood_user_password}" \
            --authenticationDatabase "admin" \
            seed.js
